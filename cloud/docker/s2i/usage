#!/bin/bash

#
# Copyright (c) 2019-2020. TIBCO Software Inc.
# This file is subject to the license terms contained in the license file that is distributed with this file.
#

cat <<EOF
Openshift's Source-to-Image (S2I) is a framework for building reproducible container images making it super easy for developers to provide application source code as an input and produce a new image that runs the assembled application as output.

TIBCO Business Events's S2I support allows users to create a reusable builder image while the developer can provide end application source code (via ear & cdd) to create and run the assembled image.

Follow the given steps to use S2I for deploying applications:

Clone https://github.com/TIBCOSoftware/be-tools.git using git clone command on your local machine.
Open terminal and go to folder cloud/docker/build


Lets start off with creating a reusable builder image:

./build_image.sh -h

Usage: build_image.sh

 [-i/--image-type]    :    Type of image. Values must be(app/rms/teagent/s2ibuilder). (example: app) [required]
                           Note: s2ibuilder image has prerequisite. Check the documentation in be-tools wiki.

 [-a/--app-location]  :    Location where the ear, cdd are located. [required only if -i/--image-type is app]

 [-s/--source]        :    Path to be-home or location where installers(TIBCO BusinessEvents, Activespaces, FTL) located. [required for installers]
                           Note: No need to specify be-home if script is executed from <BE_HOME>/cloud/docker/build folder.

 [-t/--tag]           :    Tag or name of the image. (example: beimage:v1) [optional]

 [-d/--docker-file]   :    Dockerfile to be used for generating image. [optional]

 [--gv-provider]      :    Name of GV provider to be included in the image. Values must be (consul/http/custom). (example: consul) [optional]
                           Note: This flag can be ignored if -i/--image-type is teagent.

 [--disable-tests]    :    Disables docker unit tests on created image. [optional]
                           Note: Use this flag only if -i/--image-type is app/s2ibuilder.

 [-h/--help]          :    Print the usage of script. [optional]

 NOTE : supply long options with '=' 

For example:
./build_image.sh -i s2ibuilder -s /Users/test/BE_Installers -t s2ibuilder:v1

Next we provide application source to s2i to create an assembled image off the previously created builder image.

s2i build <location of the source code> <name of the builder image> <name of the application image>

Using FraudDetection application for this example,
s2i build /Users/test/Applications/FraudDetection/source s2ibuilder:v1 fdapps2i:01

Finally run the application,
docker run -p 8108:8108 <name of the application image created in prev step(fdapps2i:01)>

EOF
